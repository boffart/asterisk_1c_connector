
&НаСервере
// Идентификатор обсуждения
// 
Функция КлючСлужебногоОбсуждения() Экспорт
	Возврат "МИКО_Asterisk_Event_2018_2";	
КонецФункции // КлючСлужебногоОбсуждения()

&НаСервере 
Функция СоздатьСлужебноеОбсуждение() Экспорт
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = НСтр("ru = 'База не подкоючена к подсистеме взаимодействий.'");
	    Сообщение.Сообщить();
		Возврат Ложь;	
	КонецЕсли; 

	КлючИнтеграции = КлючСлужебногоОбсуждения();
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючИнтеграции);
	Если Обсуждение = Неопределено Тогда
		Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	    Обсуждение.Отображаемое = Ложь;
	    Обсуждение.Ключ = КлючИнтеграции;
		
		СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого ПользовательИБ Из СписокПользователей Цикл
		  	ПользовательНайден = Ложь;
			Попытка
				ИДПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.УникальныйИдентификатор);			
		  		ПользовательНайден = Истина;
			Исключение
				Продолжить;
			КонецПопытки;
			//Если ПользовательНайден = Ложь Тогда
			//	Попытка
			//		ПользовательСистемыВзаимодействия = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);	
			//		ИДПользователя = ПользовательСистемыВзаимодействия.Идентификатор;
			//  		ПользовательНайден = Истина;
			//		ПользовательСистемыВзаимодействия.Записать();
			//	Исключение
			//	КонецПопытки; 
			//КонецЕсли; 
		    Обсуждение.Участники.Добавить(ИДПользователя);
		КонецЦикла; 
		
		Обсуждение.Отображаемое = Ложь;
	    Обсуждение.Записать();
	КонецЕсли;

	Возврат Истина;
КонецФункции // СоздатьСлужебноеОбсуждени()

&НаСервере
Функция ПодключитьПользователяКВзаимодействиям(ИД) Экспорт
	КлючИнтеграции = КлючСлужебногоОбсуждения();
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИД);
	Если Пользователь = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = НСтр("ru = 'База не подкоючена к подсистеме взаимодействий.'");
	    Сообщение.Сообщить();
		Возврат Неопределено;	
	КонецЕсли; 
	
	ИДПользователя = Неопределено;
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючИнтеграции);
	Попытка
		ИДПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИД);			
	Исключение

	КонецПопытки;
	
	Если ИДПользователя = Неопределено Тогда
		Попытка
			ПользовательВзаимодействия = СистемаВзаимодействия.СоздатьПользователя(Пользователь);	
			ПользовательВзаимодействия.Записать();
		Исключение
			Сообщить("Для подключения пользователя к подсистеме взаимодействий необходим привелегированный режим.");
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли; 
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ИДПользователя;
КонецФункции

&НаСервере
Функция ПодключитьПользователяКТелефонии(ИД, Добавить = Истина) Экспорт
	КлючИнтеграции = КлючСлужебногоОбсуждения();
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИД);
	Если Пользователь = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = НСтр("ru = 'База не подкоючена к подсистеме взаимодействий.'");
	    Сообщение.Сообщить();
		Возврат Ложь;	
	КонецЕсли; 
	
	ИДПользователя = Неопределено;
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючИнтеграции);
	Если Обсуждение = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	Попытка
		ИДПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИД);			
	Исключение
		Возврат Ложь;	
	КонецПопытки;
	
	Если ИДПользователя = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	Результат = Истина;
	Если Добавить = Истина И НЕ Обсуждение.Участники.Содержит(ИДПользователя) Тогда
		Попытка
			Обсуждение.Участники.Добавить(ИДПользователя);
			Обсуждение.Записать();
			Результат = Истина;	
		Исключение
			Результат = Ложь;	
		КонецПопытки;
	КонецЕсли; 
	
	Если Добавить = Ложь И Обсуждение.Участники.Содержит(ИДПользователя) Тогда
		Попытка
			Обсуждение.Участники.Удалить(ИДПользователя);
			Обсуждение.Записать();
			Результат = Ложь;	
		Исключение
			Результат = Истина;	
		КонецПопытки;
	КонецЕсли; 
	
	Возврат Результат;	
КонецФункции // МИКО_тИнтеграция1СТелефонияСервер.ПодключитьПользователяКТелефонии()
 
  

&НаСервере 
// Возвращает список значений - все номера текущего пользователя
// Пометка - флаг определяет внутренний номер.
//
Функция ПолучитьНомераТелефоновПользователя() Экспорт
	
	СписокНомеров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользователиКонтактнаяИнформация.Тип,
		|	ПользователиКонтактнаяИнформация.Вид,
		|	ПользователиКонтактнаяИнформация.Представление,
		|	ПользователиКонтактнаяИнформация.ЗначенияПолей,
		|	ПользователиКонтактнаяИнформация.НомерТелефона,
		|	ПользователиКонтактнаяИнформация.НомерТелефонаБезКодов
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
		|	И ПользователиКонтактнаяИнформация.Тип = &Тип";

	Запрос.УстановитьПараметр("Ссылка", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Тип", 	Перечисления.ТипыКонтактнойИнформации.Телефон);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Внутренний = Ложь;
		
		врСтандартныеПодсистемыСервер = Вычислить("СтандартныеПодсистемыСервер");
		ВерсияБиблиотекиБСП = врСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
		Если Лев(ВерсияБиблиотекиБСП, 3)="2.0" Тогда
			РедактируемаяИнформация = Вычислить("УправлениеКонтактнойИнформацией.ПреобразоватьСтрокуВСписокПолей(Выборка.ЗначенияПолей)");	
			
			Если РедактируемаяИнформация.Количество()=0 Тогда
				Продолжить;
			Иначе	
			 	Телефон = Новый Структура("КодСтраны,КодГорода,Номер,Добавочный");
				Для каждого ТекПоле Из РедактируемаяИнформация Цикл
					Если ТекПоле.Представление = "КодСтраны"
						 ИЛИ ТекПоле.Представление = "КодГорода"
						 ИЛИ ТекПоле.Представление = "Добавочный" Тогда
						ИмяСвойства = ТекПоле.Представление;	
					ИначеЕсли ТекПоле.Представление = "НомерТелефона" Тогда
						ИмяСвойства = "Номер";	
					Иначе
						Продолжить;
					КонецЕсли;
					Телефон[ИмяСвойства] = ТекПоле.Значение;
				КонецЦикла; 
			КонецЕсли; 
		Иначе
			// Все современные конфигурации.
			РедактируемаяИнформация = КонтактнаяИнформацияИзXML(Выборка.ЗначенияПолей, Новый Структура("Представление",Выборка.Представление));

			Телефон = РедактируемаяИнформация.Состав;
		КонецЕсли; 
		
		НомерТелефона		  = "" + Телефон.КодСтраны + Телефон.КодГорода + Телефон.Номер;		
		Если НЕ ЗначениеЗаполнено(НомерТелефона)
			 И ЗначениеЗаполнено( Телефон.Добавочный) Тогда
			НомерТелефона = Телефон.Добавочный;
			Внутренний = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(НомерТелефона) Тогда 
			Продолжить;
		КонецЕсли; 
		СписокНомеров.Добавить(Новый Структура("Вид,НомерТелефона,Внутренний",Выборка.Вид, НомерТелефона, Внутренний));
	КонецЦикла;
	
	Возврат СписокНомеров;
	
КонецФункции

&НаСервере 
// Десериализует представление XML контактной информации.
// Параметры 
//   ЗначенияПолей  <Строка> - XML представление контактной информации.
//   СтруктураНомера - комплексный тип: имеет свойство "Телефон" - содержит номер телефона.
// Возвращаемое значение
//   XDTO пакет.
//
Функция КонтактнаяИнформацияИзXML(Знач ЗначенияПолей, Знач СтруктураНомера) Экспорт
	врСтандартныеПодсистемыСервер = Вычислить("СтандартныеПодсистемыСервер");

	длВерсияБиблиотекиБСП = Лев(врСтандартныеПодсистемыСервер.ВерсияБиблиотеки(),5);
	Если длВерсияБиблиотекиБСП <= "2.2.3" Тогда
		врВыражение = "КонтактнаяИнформацияСлужебный.ДесериализацияТелефона(ЗначенияПолей, СтруктураНомера.Представление, Перечисления.ТипыКонтактнойИнформации.Телефон)";
	Иначе	
		РезультатыЧтения = Неопределено;
		врВыражение = "УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения)";
	КонецЕсли; 
	РедактируемаяИнформация = Вычислить(врВыражение);	
	
	Возврат РедактируемаяИнформация;
КонецФункции // КонтактнаяИнформацияИзXML()

// Возвращает ссыдку на дополнительный реквизит ID_Звонок.
//
&НаСервере
Функция ПолучитьСсылкуНаID_Звонок() Экспорт 
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ID_Звонок");
КонецФункции // ПолучитьСсылкуНаID_Звонок()
